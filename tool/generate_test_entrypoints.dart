// ignore_for_file: dead_code // This script is not used in production

import 'dart:io';

import 'package:collection/collection.dart';

/// Creates entry points for test files in the "test" and "integration_test" folders.
///
/// Run this script and then execute for example `flutter test test/_test.dart`.
///
/// For unit tests, this is a performance optimization because otherwise every
/// single file gets built as a separate app and executed in a separate isolate,
/// preventing caching of expensive computations across test files.
///
/// Related:
/// - https://github.com/flutter/flutter/issues/86722#issuecomment-914688482
/// - https://github.com/flutter/flutter/issues/17130
/// - https://github.com/flutter/flutter/issues/69429
///
/// For integration tests, this is a required workaround, because integration
/// tests split into separate files can otherwise not be run on desktop
/// platforms.
///
/// Related:
/// - https://github.com/flutter/flutter/issues/101031
void main() {
  for (final folder in ['test']) {
    generateTestEntrypoint(folder);
  }
}

void generateTestEntrypoint(String folder) {
  const measureExecutionTimes = false;

  // Get all test files from the folder
  final testFiles = Directory(folder)
      .listSync()
      .map((f) => f.path.replaceAll(r'\', '/').replaceFirst('$folder/', ''))
      .where(
        (f) => f.endsWith('_test.dart') && f != '_test.dart',
      )
      .sorted()
      .toList();

  final entryPoint = StringBuffer();

  entryPoint.writeln(
    '// This file was auto-generated by `tool/generate_test_entrypoints.dart`.',
  );
  entryPoint.writeln('// ignore_for_file: avoid_print');
  entryPoint.writeln("import 'package:flutter_test/flutter_test.dart';");
  if (measureExecutionTimes) {
    entryPoint.writeln("import 'package:test_api/src/backend/invoker.dart';");
  }
  if (folder == 'integration_test') {
    entryPoint
        .writeln("import 'package:integration_test/integration_test.dart';");
  }
  entryPoint.writeln();

  for (final file in testFiles) {
    final testName = file.replaceAll('.dart', '');
    entryPoint.writeln("import '$file' as $testName;");
  }

  entryPoint.writeln();

  entryPoint.writeln('void main() {');

  if (folder == 'integration_test') {
    entryPoint
        .writeln('IntegrationTestWidgetsFlutterBinding.ensureInitialized();');
  }

  if (measureExecutionTimes) {
    entryPoint.writeAll(
      [
        '  // Collect test execution times',
        'final testTimes = <String, Duration>{};',
        '',
        'setUp(() {',
        '  final stopwatch = Stopwatch()..start();',
        '  addTearDown(() {',
        '    testTimes[Invoker.current!.liveTest.test.name] = stopwatch.elapsed;',
        '  });',
        '});',
        '',
        'tearDownAll(() {',
        '  final sortedTestTimes = testTimes.entries.toList()',
        '    ..sort((a, b) => b.value.compareTo(a.value));',
        '',
        '  for (final entry in sortedTestTimes) {',
        '    if (entry.value.inMilliseconds > 100) {',
        r"      print('${entry.value.inMilliseconds}ms: ${entry.key}');",
        '    }',
        '  }',
        '});',
      ],
      '\n',
    );
  }

  for (final file in testFiles) {
    final testName = file.replaceAll('.dart', '');
    entryPoint.writeln("  group('$file: ', $testName.main,);");
  }

  entryPoint.writeln('}');

  File('$folder/_test.dart').writeAsStringSync(entryPoint.toString());
}
